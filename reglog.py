# -*- coding: utf-8 -*-
"""RegLog.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G0yNGIrgHeSiTaNXD7-Csuz4t_P3tbdC

Importation des bibliothèque pandas et seaborn
"""

import pandas as pd
import seaborn as sns

"""Charger des données"""

path="/content/drive/MyDrive/Datasets/creditcard.csv"

df=pd.read_csv(path)

df.head()

"""Exploration des données"""

df.info()

sns.countplot(x="Class", data=df)

"""Preparation de nos données c'est à dire séparer la base de donnée à une sous base pour l'entrainement"""

X = df.drop(columns='Class', axis=1)
y = df.Class.values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

"""Construction de notre modèle de regression logistique"""

à partir de  sklearn.linear_model  importer  LogisticRegression
lr = LogisticRegression ( solveur =  'newton-cg' )

"""entrainement du modèle"""

lr.fit(X_train, y_train)

print(lr.coef_)
print(lr.intercept_)

"""Etape de l'évaluation"""

y_predict = lr.predict(X_test)

y_predict

from sklearn.metrics import accuracy_score

test_accuracy = accuracy_score(y_test, y_predict)*100

print('Testing accuracy: ', test_accuracy)

from sklearn.metrics import confusion_matrix
print('Confusion matrix:\n', confusion_matrix(y_test, y_predict))

tn, fp, fn, tp = confusion_matrix(y_test, y_predict).ravel()
print(tn,fp,fn,tp)

"""Affiche du rapport de classification"""

from sklearn.metrics import classification_report
print(classification_report(y_test, y_predict, digits=6))

from sklearn.metrics import RocCurveDisplay
import matplotlib.pyplot as plt

RocCurveDisplay.from_estimator(lr, X_test, y_test)
plt.show()

"""Recherche d'une meilleur valeur pour le seuil"""

y_test_predict_probs = lr.predict_proba(X_test)[:,1]

y_test_predict_probs

from sklearn.metrics import roc_curve
fpr, tpr, thresholds = roc_curve(y_test, y_test_predict_probs)

from numpy import argmax
best = tpr - fpr

ix = argmax(best)
best_threshold = thresholds[ix]
print('Best Threshold = ', best_threshold)